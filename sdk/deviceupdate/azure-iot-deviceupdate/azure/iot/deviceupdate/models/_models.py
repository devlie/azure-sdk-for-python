# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
import sys
from typing import Any, Dict, List, Mapping, Optional, TYPE_CHECKING, Union, overload

from .. import _model_base
from .._model_base import rest_discriminator, rest_field
from ._enums import StepType

if sys.version_info >= (3, 8):
    from typing import Literal  # pylint: disable=no-name-in-module, ungrouped-imports
else:
    from typing_extensions import Literal  # type: ignore  # pylint: disable=ungrouped-imports

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models


class CloudInitiatedRollbackPolicy(_model_base.Model):
    """Rollback policy for deployment.

    All required parameters must be populated in order to send to server.

    :ivar update: Update to rollback to. Required.
    :vartype update: ~azure.iot.deviceupdate.models.UpdateInfo
    :ivar failure: Failure conditions to initiate rollback policy. Required.
    :vartype failure: ~azure.iot.deviceupdate.models.CloudInitiatedRollbackPolicyFailure
    """

    update: "_models.UpdateInfo" = rest_field()
    """Update to rollback to. Required."""
    failure: "_models.CloudInitiatedRollbackPolicyFailure" = rest_field()
    """Failure conditions to initiate rollback policy. Required."""

    @overload
    def __init__(
        self,
        *,
        update: "_models.UpdateInfo",
        failure: "_models.CloudInitiatedRollbackPolicyFailure",
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class CloudInitiatedRollbackPolicyFailure(_model_base.Model):
    """Failure conditions to initiate rollback policy.

    All required parameters must be populated in order to send to server.

    :ivar devices_failed_percentage: Percentage of devices that failed. Required.
    :vartype devices_failed_percentage: int
    :ivar devices_failed_count: Number of devices that failed. Required.
    :vartype devices_failed_count: int
    """

    devices_failed_percentage: int = rest_field(name="devicesFailedPercentage")
    """Percentage of devices that failed. Required."""
    devices_failed_count: int = rest_field(name="devicesFailedCount")
    """Number of devices that failed. Required."""

    @overload
    def __init__(
        self,
        *,
        devices_failed_percentage: int,
        devices_failed_count: int,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ContractModel(_model_base.Model):
    """The Device Update agent contract model.

    All required parameters must be populated in order to send to server.

    :ivar id: The Device Update agent contract model Id of the device class. This is also
     used to calculate the device class Id. Required.
    :vartype id: str
    :ivar name: The Device Update agent contract model name of the device class. Intended to be
     a more readable form of the contract model Id. Required.
    :vartype name: str
    """

    id: str = rest_field()
    """The Device Update agent contract model Id of the device class. This is also
     used to calculate the device class Id. Required."""
    name: str = rest_field()
    """The Device Update agent contract model name of the device class. Intended to be
     a more readable form of the contract model Id. Required."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        name: str,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class Counters(_model_base.Model):
    """The list of counts of each limited resource with both current usage and overall quota.

    All required parameters must be populated in order to send to server.

    :ivar device_count: The current usage and quota of devices. Required.
    :vartype device_count: ~azure.iot.deviceupdate.models.UsageQuotaCounter
    :ivar device_class_count: The current usage and quota of device classes. Required.
    :vartype device_class_count: ~azure.iot.deviceupdate.models.UsageQuotaCounter
    :ivar device_group_count: The current usage and quota of device groups. Required.
    :vartype device_group_count: ~azure.iot.deviceupdate.models.UsageQuotaCounter
    :ivar active_deployment_count: The current usage and quota of active deployments. Required.
    :vartype active_deployment_count: ~azure.iot.deviceupdate.models.UsageQuotaCounter
    :ivar deployment_count: The current usage and quota of deployments. Required.
    :vartype deployment_count: ~azure.iot.deviceupdate.models.UsageQuotaCounter
    """

    device_count: "_models.UsageQuotaCounter" = rest_field(name="deviceCount")
    """The current usage and quota of devices. Required."""
    device_class_count: "_models.UsageQuotaCounter" = rest_field(name="deviceClassCount")
    """The current usage and quota of device classes. Required."""
    device_group_count: "_models.UsageQuotaCounter" = rest_field(name="deviceGroupCount")
    """The current usage and quota of device groups. Required."""
    active_deployment_count: "_models.UsageQuotaCounter" = rest_field(name="activeDeploymentCount")
    """The current usage and quota of active deployments. Required."""
    deployment_count: "_models.UsageQuotaCounter" = rest_field(name="deploymentCount")
    """The current usage and quota of deployments. Required."""

    @overload
    def __init__(
        self,
        *,
        device_count: "_models.UsageQuotaCounter",
        device_class_count: "_models.UsageQuotaCounter",
        device_group_count: "_models.UsageQuotaCounter",
        active_deployment_count: "_models.UsageQuotaCounter",
        deployment_count: "_models.UsageQuotaCounter",
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class Deployment(_model_base.Model):
    """Deployment metadata.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar deployment_id: The caller-provided deployment identifier. This cannot be longer than 73
     characters, must be all lower-case, and cannot contain '&', '^', '[', ']', '{',
     '}', '|', '<', '>', forward slash, backslash, or double quote. The Updates view
     in the Azure Portal IoT Hub resource generates a GUID for deploymentId when you
     create a deployment. Required.
    :vartype deployment_id: str
    :ivar start_date_time: The deployment start datetime. Required.
    :vartype start_date_time: ~datetime.datetime
    :ivar update: Update information for the update in the deployment. Required.
    :vartype update: ~azure.iot.deviceupdate.models.UpdateInfo
    :ivar group_id: The group identity for the devices the deployment is intended to update.
     Required.
    :vartype group_id: str
    :ivar device_class_subgroups: The device class subgroups the deployment is compatible with and
     subgroup
     deployments have been created for. This is not provided by the caller during
     CreateOrUpdateDeployment but is automatically determined by Device Update.
    :vartype device_class_subgroups: list[str]
    :ivar is_canceled: Boolean flag indicating whether the deployment was canceled.
    :vartype is_canceled: bool
    :ivar is_retried: Boolean flag indicating whether the deployment has been retried.
    :vartype is_retried: bool
    :ivar rollback_policy: The rollback policy for the deployment.
    :vartype rollback_policy: ~azure.iot.deviceupdate.models.CloudInitiatedRollbackPolicy
    :ivar is_cloud_initiated_rollback: Boolean flag indicating whether the deployment is a rollback
     deployment.
    :vartype is_cloud_initiated_rollback: bool
    """

    deployment_id: str = rest_field(name="deploymentId", visibility=["read", "create"])
    """The caller-provided deployment identifier. This cannot be longer than 73
     characters, must be all lower-case, and cannot contain '&', '^', '[', ']', '{',
     '}', '|', '<', '>', forward slash, backslash, or double quote. The Updates view
     in the Azure Portal IoT Hub resource generates a GUID for deploymentId when you
     create a deployment. Required."""
    start_date_time: datetime.datetime = rest_field(
        name="startDateTime", visibility=["read", "create", "update"], format="rfc3339"
    )
    """The deployment start datetime. Required."""
    update: "_models.UpdateInfo" = rest_field(visibility=["read", "create"])
    """Update information for the update in the deployment. Required."""
    group_id: str = rest_field(name="groupId", visibility=["read", "create"])
    """The group identity for the devices the deployment is intended to update. Required."""
    device_class_subgroups: Optional[List[str]] = rest_field(name="deviceClassSubgroups", visibility=["read"])
    """The device class subgroups the deployment is compatible with and subgroup
     deployments have been created for. This is not provided by the caller during
     CreateOrUpdateDeployment but is automatically determined by Device Update."""
    is_canceled: Optional[bool] = rest_field(name="isCanceled", visibility=["read"])
    """Boolean flag indicating whether the deployment was canceled."""
    is_retried: Optional[bool] = rest_field(name="isRetried", visibility=["read"])
    """Boolean flag indicating whether the deployment has been retried."""
    rollback_policy: Optional["_models.CloudInitiatedRollbackPolicy"] = rest_field(
        name="rollbackPolicy", visibility=["read", "create"]
    )
    """The rollback policy for the deployment."""
    is_cloud_initiated_rollback: Optional[bool] = rest_field(name="isCloudInitiatedRollback", visibility=["read"])
    """Boolean flag indicating whether the deployment is a rollback deployment."""

    @overload
    def __init__(
        self,
        *,
        deployment_id: str,
        start_date_time: datetime.datetime,
        update: "_models.UpdateInfo",
        group_id: str,
        rollback_policy: Optional["_models.CloudInitiatedRollbackPolicy"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class DeploymentDeviceState(_model_base.Model):
    """Deployment device status.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar device_id: Device identity. Required.
    :vartype device_id: str
    :ivar module_id: Device module identity.
    :vartype module_id: str
    :ivar retry_count: The number of times this deployment has been retried on this device.
     Required.
    :vartype retry_count: int
    :ivar moved_on_to_new_deployment: Boolean flag indicating whether this device is in a newer
     deployment and can no
     longer retry this deployment. Required.
    :vartype moved_on_to_new_deployment: bool
    :ivar device_state: Deployment device state. Required. Known values are: "Succeeded",
     "InProgress", "Canceled", and "Failed".
    :vartype device_state: str or ~azure.iot.deviceupdate.models.DeviceDeploymentState
    """

    device_id: str = rest_field(name="deviceId", visibility=["read"])
    """Device identity. Required."""
    module_id: Optional[str] = rest_field(name="moduleId")
    """Device module identity."""
    retry_count: int = rest_field(name="retryCount")
    """The number of times this deployment has been retried on this device. Required."""
    moved_on_to_new_deployment: bool = rest_field(name="movedOnToNewDeployment")
    """Boolean flag indicating whether this device is in a newer deployment and can no
     longer retry this deployment. Required."""
    device_state: Union[str, "_models.DeviceDeploymentState"] = rest_field(name="deviceState")
    """Deployment device state. Required. Known values are: \"Succeeded\", \"InProgress\",
     \"Canceled\", and \"Failed\"."""

    @overload
    def __init__(
        self,
        *,
        retry_count: int,
        moved_on_to_new_deployment: bool,
        device_state: Union[str, "_models.DeviceDeploymentState"],
        module_id: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class DeploymentStatus(_model_base.Model):
    """Deployment status metadata.

    All required parameters must be populated in order to send to server.

    :ivar group_id: The group identity. Required.
    :vartype group_id: str
    :ivar deployment_state: The state of the deployment. Required. Known values are: "Active",
     "ActiveWithSubgroupFailures", "Failed", "Inactive", and "Canceled".
    :vartype deployment_state: str or ~azure.iot.deviceupdate.models.DeploymentState
    :ivar error: The error details of the Failed state.  This is not present if the deployment
     state is not Failed.
    :vartype error: ~azure.iot.deviceupdate.models.Error
    :ivar subgroup_status: The collection of device class subgroup status objects. Required.
    :vartype subgroup_status:
     list[~azure.iot.deviceupdate.models.DeviceClassSubgroupDeploymentStatus]
    """

    group_id: str = rest_field(name="groupId")
    """The group identity. Required."""
    deployment_state: Union[str, "_models.DeploymentState"] = rest_field(name="deploymentState")
    """The state of the deployment. Required. Known values are: \"Active\",
     \"ActiveWithSubgroupFailures\", \"Failed\", \"Inactive\", and \"Canceled\"."""
    error: Optional["_models.Error"] = rest_field()
    """The error details of the Failed state.  This is not present if the deployment
     state is not Failed."""
    subgroup_status: List["_models.DeviceClassSubgroupDeploymentStatus"] = rest_field(name="subgroupStatus")
    """The collection of device class subgroup status objects. Required."""

    @overload
    def __init__(
        self,
        *,
        group_id: str,
        deployment_state: Union[str, "_models.DeploymentState"],
        subgroup_status: List["_models.DeviceClassSubgroupDeploymentStatus"],
        error: Optional["_models.Error"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class Device(_model_base.Model):
    """Device metadata.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar device_id: Device identity. Required.
    :vartype device_id: str
    :ivar module_id: Device module identity.
    :vartype module_id: str
    :ivar device_class_id: Device class identity. Required.
    :vartype device_class_id: str
    :ivar group_id: Device group identity.
    :vartype group_id: str
    :ivar last_attempted_update: The update that device last attempted to install.
    :vartype last_attempted_update: ~azure.iot.deviceupdate.models.UpdateInfo
    :ivar deployment_status: State of the device in its last deployment. Known values are:
     "Succeeded", "InProgress", "Canceled", and "Failed".
    :vartype deployment_status: str or ~azure.iot.deviceupdate.models.DeviceDeploymentState
    :ivar installed_update: Currently installed update on device.
    :vartype installed_update: ~azure.iot.deviceupdate.models.UpdateInfo
    :ivar on_latest_update: Boolean flag indicating whether the latest update (the best compatible
     update
     for the device's device class and group) is installed on the device. Required.
    :vartype on_latest_update: bool
    :ivar last_deployment_id: The deployment identifier for the last deployment to the device.
    :vartype last_deployment_id: str
    :ivar last_install_result: Last install result.
    :vartype last_install_result: ~azure.iot.deviceupdate.models.InstallResult
    """

    device_id: str = rest_field(name="deviceId", visibility=["read"])
    """Device identity. Required."""
    module_id: Optional[str] = rest_field(name="moduleId")
    """Device module identity."""
    device_class_id: str = rest_field(name="deviceClassId")
    """Device class identity. Required."""
    group_id: Optional[str] = rest_field(name="groupId")
    """Device group identity."""
    last_attempted_update: Optional["_models.UpdateInfo"] = rest_field(name="lastAttemptedUpdate")
    """The update that device last attempted to install."""
    deployment_status: Optional[Union[str, "_models.DeviceDeploymentState"]] = rest_field(name="deploymentStatus")
    """State of the device in its last deployment. Known values are: \"Succeeded\", \"InProgress\",
     \"Canceled\", and \"Failed\"."""
    installed_update: Optional["_models.UpdateInfo"] = rest_field(name="installedUpdate")
    """Currently installed update on device."""
    on_latest_update: bool = rest_field(name="onLatestUpdate")
    """Boolean flag indicating whether the latest update (the best compatible update
     for the device's device class and group) is installed on the device. Required."""
    last_deployment_id: Optional[str] = rest_field(name="lastDeploymentId")
    """The deployment identifier for the last deployment to the device."""
    last_install_result: Optional["_models.InstallResult"] = rest_field(name="lastInstallResult")
    """Last install result."""

    @overload
    def __init__(
        self,
        *,
        device_class_id: str,
        on_latest_update: bool,
        module_id: Optional[str] = None,
        group_id: Optional[str] = None,
        last_attempted_update: Optional["_models.UpdateInfo"] = None,
        deployment_status: Optional[Union[str, "_models.DeviceDeploymentState"]] = None,
        installed_update: Optional["_models.UpdateInfo"] = None,
        last_deployment_id: Optional[str] = None,
        last_install_result: Optional["_models.InstallResult"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class DeviceClass(_model_base.Model):
    """Device class metadata.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar device_class_id: The device class identifier. This is generated from the model Id and the
     compat
     properties reported by the device update agent in the Device Update PnP
     interface in IoT Hub. It is a hex-encoded SHA1 hash. Required.
    :vartype device_class_id: str
    :ivar friendly_name: The device class friendly name. This can be updated by callers after the
     device
     class has been automatically created.
    :vartype friendly_name: str
    :ivar device_class_properties: The device class properties that are used to calculate the
     device class Id. Required.
    :vartype device_class_properties: ~azure.iot.deviceupdate.models.DeviceClassProperties
    :ivar best_compatible_update: Update that is the highest version compatible with this device
     class.
    :vartype best_compatible_update: ~azure.iot.deviceupdate.models.UpdateInfo
    """

    device_class_id: str = rest_field(name="deviceClassId", visibility=["read"])
    """The device class identifier. This is generated from the model Id and the compat
     properties reported by the device update agent in the Device Update PnP
     interface in IoT Hub. It is a hex-encoded SHA1 hash. Required."""
    friendly_name: Optional[str] = rest_field(name="friendlyName", visibility=["read", "update"])
    """The device class friendly name. This can be updated by callers after the device
     class has been automatically created."""
    device_class_properties: "_models.DeviceClassProperties" = rest_field(
        name="deviceClassProperties", visibility=["read"]
    )
    """The device class properties that are used to calculate the device class Id. Required."""
    best_compatible_update: Optional["_models.UpdateInfo"] = rest_field(
        name="bestCompatibleUpdate", visibility=["read"]
    )
    """Update that is the highest version compatible with this device class."""

    @overload
    def __init__(
        self,
        *,
        friendly_name: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class DeviceClassProperties(_model_base.Model):
    """The device class properties that are used to calculate the device class Id.

    All required parameters must be populated in order to send to server.

    :ivar contract_model: The Device Update agent contract model.
    :vartype contract_model: ~azure.iot.deviceupdate.models.ContractModel
    :ivar compat_properties: The compat properties of the device class. This object can be thought
     of as a
     set of key-value pairs where the key is the name of the compatibility property
     and the value is the value of the compatibility property. There will always be
     at least 1 compat property. Required.
    :vartype compat_properties: dict[str, str]
    """

    contract_model: Optional["_models.ContractModel"] = rest_field(name="contractModel")
    """The Device Update agent contract model."""
    compat_properties: Dict[str, str] = rest_field(name="compatProperties")
    """The compat properties of the device class. This object can be thought of as a
     set of key-value pairs where the key is the name of the compatibility property
     and the value is the value of the compatibility property. There will always be
     at least 1 compat property. Required."""

    @overload
    def __init__(
        self,
        *,
        compat_properties: Dict[str, str],
        contract_model: Optional["_models.ContractModel"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class DeviceClassSubgroup(_model_base.Model):
    """Device class subgroup details. A device class subgroup is a subset of devices
    in a group that share the same device class id.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar device_class_id: Device class subgroup identity. This is generated from the model Id and
     the
     compat properties reported by the device update agent in the Device Update PnP
     interface in IoT Hub. It is a hex-encoded SHA1 hash. Required.
    :vartype device_class_id: str
    :ivar group_id: Group identity. Required.
    :vartype group_id: str
    :ivar created_date_time: Date and time when the device class subgroup was created. Required.
    :vartype created_date_time: str
    :ivar device_count: The number of devices in the device class subgroup.
    :vartype device_count: int
    :ivar deployment_id: The active deployment Id for the device class subgroup.
    :vartype deployment_id: str
    """

    device_class_id: str = rest_field(name="deviceClassId", visibility=["read"])
    """Device class subgroup identity. This is generated from the model Id and the
     compat properties reported by the device update agent in the Device Update PnP
     interface in IoT Hub. It is a hex-encoded SHA1 hash. Required."""
    group_id: str = rest_field(name="groupId")
    """Group identity. Required."""
    created_date_time: str = rest_field(name="createdDateTime")
    """Date and time when the device class subgroup was created. Required."""
    device_count: Optional[int] = rest_field(name="deviceCount")
    """The number of devices in the device class subgroup."""
    deployment_id: Optional[str] = rest_field(name="deploymentId")
    """The active deployment Id for the device class subgroup."""

    @overload
    def __init__(
        self,
        *,
        group_id: str,
        created_date_time: str,
        device_count: Optional[int] = None,
        deployment_id: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class DeviceClassSubgroupDeployment(_model_base.Model):
    """DeviceClass Subgroup Deployment metadata.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar deployment_id: The caller-provided deployment identifier. This cannot be longer than 73
     characters, must be all lower-case, and cannot contain '&', '^', '[', ']', '{',
     '}', '|', '<', '>', forward slash, backslash, or double quote. The Updates view
     in the Azure Portal IoT Hub resource generates a GUID for deploymentId when you
     create a deployment. Required.
    :vartype deployment_id: str
    :ivar start_date_time: The deployment start datetime. Required.
    :vartype start_date_time: ~datetime.datetime
    :ivar update: Update information for the update in the deployment. Required.
    :vartype update: ~azure.iot.deviceupdate.models.UpdateInfo
    :ivar group_id: The group identity for the devices the deployment is intended to update.
     Required.
    :vartype group_id: str
    :ivar device_class_subgroups: The device class subgroups the deployment is compatible with and
     subgroup
     deployments have been created for. This is not provided by the caller during
     CreateOrUpdateDeployment but is automatically determined by Device Update.
    :vartype device_class_subgroups: list[str]
    :ivar is_canceled: Boolean flag indicating whether the deployment was canceled.
    :vartype is_canceled: bool
    :ivar is_retried: Boolean flag indicating whether the deployment has been retried.
    :vartype is_retried: bool
    :ivar rollback_policy: The rollback policy for the deployment.
    :vartype rollback_policy: ~azure.iot.deviceupdate.models.CloudInitiatedRollbackPolicy
    :ivar is_cloud_initiated_rollback: Boolean flag indicating whether the deployment is a rollback
     deployment.
    :vartype is_cloud_initiated_rollback: bool
    """

    deployment_id: str = rest_field(name="deploymentId", visibility=["read", "create"])
    """The caller-provided deployment identifier. This cannot be longer than 73
     characters, must be all lower-case, and cannot contain '&', '^', '[', ']', '{',
     '}', '|', '<', '>', forward slash, backslash, or double quote. The Updates view
     in the Azure Portal IoT Hub resource generates a GUID for deploymentId when you
     create a deployment. Required."""
    start_date_time: datetime.datetime = rest_field(
        name="startDateTime", visibility=["read", "create", "update"], format="rfc3339"
    )
    """The deployment start datetime. Required."""
    update: "_models.UpdateInfo" = rest_field(visibility=["read", "create"])
    """Update information for the update in the deployment. Required."""
    group_id: str = rest_field(name="groupId", visibility=["read", "create"])
    """The group identity for the devices the deployment is intended to update. Required."""
    device_class_subgroups: Optional[List[str]] = rest_field(name="deviceClassSubgroups", visibility=["read"])
    """The device class subgroups the deployment is compatible with and subgroup
     deployments have been created for. This is not provided by the caller during
     CreateOrUpdateDeployment but is automatically determined by Device Update."""
    is_canceled: Optional[bool] = rest_field(name="isCanceled", visibility=["read"])
    """Boolean flag indicating whether the deployment was canceled."""
    is_retried: Optional[bool] = rest_field(name="isRetried", visibility=["read"])
    """Boolean flag indicating whether the deployment has been retried."""
    rollback_policy: Optional["_models.CloudInitiatedRollbackPolicy"] = rest_field(
        name="rollbackPolicy", visibility=["read", "create"]
    )
    """The rollback policy for the deployment."""
    is_cloud_initiated_rollback: Optional[bool] = rest_field(name="isCloudInitiatedRollback", visibility=["read"])
    """Boolean flag indicating whether the deployment is a rollback deployment."""

    @overload
    def __init__(
        self,
        *,
        deployment_id: str,
        start_date_time: datetime.datetime,
        update: "_models.UpdateInfo",
        group_id: str,
        rollback_policy: Optional["_models.CloudInitiatedRollbackPolicy"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class DeviceClassSubgroupDeploymentStatus(_model_base.Model):
    """Device class subgroup deployment status metadata.

    All required parameters must be populated in order to send to server.

    :ivar group_id: The group identity. Required.
    :vartype group_id: str
    :ivar device_class_id: The device class subgroup identity. Required.
    :vartype device_class_id: str
    :ivar deployment_state: The state of the subgroup deployment. Required. Known values are:
     "Active", "Failed", "Inactive", and "Canceled".
    :vartype deployment_state: str or
     ~azure.iot.deviceupdate.models.DeviceClassSubgroupDeploymentState
    :ivar error: The error details of the Failed state.  This is not present if the deployment
     state is not Failed.
    :vartype error: ~azure.iot.deviceupdate.models.Error
    :ivar total_devices: The total number of devices in the deployment.
    :vartype total_devices: int
    :ivar devices_in_progress_count: The number of devices that are currently in deployment.
    :vartype devices_in_progress_count: int
    :ivar devices_completed_failed_count: The number of devices that have completed deployment with
     a failure.
    :vartype devices_completed_failed_count: int
    :ivar devices_completed_succeeded_count: The number of devices which have successfully
     completed deployment.
    :vartype devices_completed_succeeded_count: int
    :ivar devices_canceled_count: The number of devices which have had their deployment canceled.
    :vartype devices_canceled_count: int
    """

    group_id: str = rest_field(name="groupId")
    """The group identity. Required."""
    device_class_id: str = rest_field(name="deviceClassId")
    """The device class subgroup identity. Required."""
    deployment_state: Union[str, "_models.DeviceClassSubgroupDeploymentState"] = rest_field(name="deploymentState")
    """The state of the subgroup deployment. Required. Known values are: \"Active\", \"Failed\",
     \"Inactive\", and \"Canceled\"."""
    error: Optional["_models.Error"] = rest_field()
    """The error details of the Failed state.  This is not present if the deployment
     state is not Failed."""
    total_devices: Optional[int] = rest_field(name="totalDevices")
    """The total number of devices in the deployment."""
    devices_in_progress_count: Optional[int] = rest_field(name="devicesInProgressCount")
    """The number of devices that are currently in deployment."""
    devices_completed_failed_count: Optional[int] = rest_field(name="devicesCompletedFailedCount")
    """The number of devices that have completed deployment with a failure."""
    devices_completed_succeeded_count: Optional[int] = rest_field(name="devicesCompletedSucceededCount")
    """The number of devices which have successfully completed deployment."""
    devices_canceled_count: Optional[int] = rest_field(name="devicesCanceledCount")
    """The number of devices which have had their deployment canceled."""

    @overload
    def __init__(
        self,
        *,
        group_id: str,
        device_class_id: str,
        deployment_state: Union[str, "_models.DeviceClassSubgroupDeploymentState"],
        error: Optional["_models.Error"] = None,
        total_devices: Optional[int] = None,
        devices_in_progress_count: Optional[int] = None,
        devices_completed_failed_count: Optional[int] = None,
        devices_completed_succeeded_count: Optional[int] = None,
        devices_canceled_count: Optional[int] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class DeviceClassSubgroupUpdatableDevices(_model_base.Model):
    """Device class subgroup, update information, and the number of devices for which the update is
    applicable.

    All required parameters must be populated in order to send to server.

    :ivar group_id: The group Id. Required.
    :vartype group_id: str
    :ivar device_class_id: The device class subgroup's device class Id. Required.
    :vartype device_class_id: str
    :ivar update: Update information. Required.
    :vartype update: ~azure.iot.deviceupdate.models.UpdateInfo
    :ivar device_count: Total number of devices for which the update is applicable. Required.
    :vartype device_count: int
    """

    group_id: str = rest_field(name="groupId")
    """The group Id. Required."""
    device_class_id: str = rest_field(name="deviceClassId")
    """The device class subgroup's device class Id. Required."""
    update: "_models.UpdateInfo" = rest_field()
    """Update information. Required."""
    device_count: int = rest_field(name="deviceCount")
    """Total number of devices for which the update is applicable. Required."""

    @overload
    def __init__(
        self,
        *,
        group_id: str,
        device_class_id: str,
        update: "_models.UpdateInfo",
        device_count: int,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class DeviceHealth(_model_base.Model):
    """Device Health.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar device_id: Device id. Required.
    :vartype device_id: str
    :ivar module_id: Module id.
    :vartype module_id: str
    :ivar state: Aggregate device health state. Required. Known values are: "healthy" and
     "unhealthy".
    :vartype state: str or ~azure.iot.deviceupdate.models.DeviceHealthState
    :ivar digital_twin_model_id: Digital twin model Id.
    :vartype digital_twin_model_id: str
    :ivar health_checks: Array of health checks and their results. Required.
    :vartype health_checks: list[~azure.iot.deviceupdate.models.HealthCheck]
    """

    device_id: str = rest_field(name="deviceId", visibility=["read"])
    """Device id. Required."""
    module_id: Optional[str] = rest_field(name="moduleId")
    """Module id."""
    state: Union[str, "_models.DeviceHealthState"] = rest_field()
    """Aggregate device health state. Required. Known values are: \"healthy\" and \"unhealthy\"."""
    digital_twin_model_id: Optional[str] = rest_field(name="digitalTwinModelId")
    """Digital twin model Id."""
    health_checks: List["_models.HealthCheck"] = rest_field(name="healthChecks")
    """Array of health checks and their results. Required."""

    @overload
    def __init__(
        self,
        *,
        state: Union[str, "_models.DeviceHealthState"],
        health_checks: List["_models.HealthCheck"],
        module_id: Optional[str] = None,
        digital_twin_model_id: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class DeviceOperation(_model_base.Model):
    """Operation metadata.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar operation_id: Operation Id. Required.
    :vartype operation_id: str
    :ivar status: Operation status. Required. Known values are: "NotStarted", "Running",
     "Succeeded", and "Failed".
    :vartype status: str or ~azure.iot.deviceupdate.models.OperationStatus
    :ivar error: Operation error encountered, if any.
    :vartype error: ~azure.iot.deviceupdate.models.Error
    :ivar trace_id: Operation correlation identity that can used by Microsoft Support for
     troubleshooting.
    :vartype trace_id: str
    :ivar last_action_date_time: Date and time in UTC when the operation status was last updated.
     Required.
    :vartype last_action_date_time: ~datetime.datetime
    :ivar created_date_time: Date and time in UTC when the operation was created. Required.
    :vartype created_date_time: ~datetime.datetime
    :ivar etag: Operation ETag.
    :vartype etag: str
    """

    operation_id: str = rest_field(name="operationId", visibility=["read"])
    """Operation Id. Required."""
    status: Union[str, "_models.OperationStatus"] = rest_field()
    """Operation status. Required. Known values are: \"NotStarted\", \"Running\", \"Succeeded\", and
     \"Failed\"."""
    error: Optional["_models.Error"] = rest_field()
    """Operation error encountered, if any."""
    trace_id: Optional[str] = rest_field(name="traceId")
    """Operation correlation identity that can used by Microsoft Support for troubleshooting."""
    last_action_date_time: datetime.datetime = rest_field(name="lastActionDateTime", format="rfc3339")
    """Date and time in UTC when the operation status was last updated. Required."""
    created_date_time: datetime.datetime = rest_field(name="createdDateTime", format="rfc3339")
    """Date and time in UTC when the operation was created. Required."""
    etag: Optional[str] = rest_field()
    """Operation ETag."""

    @overload
    def __init__(
        self,
        *,
        status: Union[str, "_models.OperationStatus"],
        last_action_date_time: datetime.datetime,
        created_date_time: datetime.datetime,
        error: Optional["_models.Error"] = None,
        trace_id: Optional[str] = None,
        etag: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class DeviceUpdateAgentId(_model_base.Model):
    """Device Update agent id.

    All required parameters must be populated in order to send to server.

    :ivar device_id: Device Id. Required.
    :vartype device_id: str
    :ivar module_id: Module Id.
    :vartype module_id: str
    """

    device_id: str = rest_field(name="deviceId")
    """Device Id. Required."""
    module_id: Optional[str] = rest_field(name="moduleId")
    """Module Id."""

    @overload
    def __init__(
        self,
        *,
        device_id: str,
        module_id: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class Error(_model_base.Model):
    """The error object.

    All required parameters must be populated in order to send to server.

    :ivar code: One of a server-defined set of error codes. Required.
    :vartype code: str
    :ivar message: A human-readable representation of the error. Required.
    :vartype message: str
    :ivar target: The target of the error.
    :vartype target: str
    :ivar details: An array of details about specific errors that led to this reported error.
    :vartype details: list[~azure.iot.deviceupdate.models.Error]
    :ivar innererror: An object containing more specific information than the current object about
     the error.
    :vartype innererror: ~azure.iot.deviceupdate.models.InnerError
    """

    code: str = rest_field()
    """One of a server-defined set of error codes. Required."""
    message: str = rest_field()
    """A human-readable representation of the error. Required."""
    target: Optional[str] = rest_field()
    """The target of the error."""
    details: Optional[List["_models.Error"]] = rest_field()
    """An array of details about specific errors that led to this reported error."""
    innererror: Optional["_models.InnerError"] = rest_field()
    """An object containing more specific information than the current object about the error."""

    @overload
    def __init__(
        self,
        *,
        code: str,
        message: str,
        target: Optional[str] = None,
        details: Optional[List["_models.Error"]] = None,
        innererror: Optional["_models.InnerError"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class FileImportMetadata(_model_base.Model):
    """Metadata describing an update file.

    All required parameters must be populated in order to send to server.

    :ivar filename: Update file name as specified inside import manifest. Required.
    :vartype filename: str
    :ivar url: Azure Blob location from which the update file can be downloaded by Device
     Update for IoT Hub. This is typically a read-only SAS-protected blob URL with
     an expiration set to at least 4 hours. Required.
    :vartype url: str
    """

    filename: str = rest_field()
    """Update file name as specified inside import manifest. Required."""
    url: str = rest_field()
    """Azure Blob location from which the update file can be downloaded by Device
     Update for IoT Hub. This is typically a read-only SAS-protected blob URL with
     an expiration set to at least 4 hours. Required."""

    @overload
    def __init__(
        self,
        *,
        filename: str,
        url: str,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class Group(_model_base.Model):
    """Group details.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar group_id: Group identity. This is created from the value of the ADUGroup tag in the Iot
     Hub's device/module twin or $default for devices with no tag. Required.
    :vartype group_id: str
    :ivar group_type: Group type. Required. Known values are: "IoTHubTag" and "DefaultNoTag".
    :vartype group_type: str or ~azure.iot.deviceupdate.models.GroupType
    :ivar created_date_time: Date and time when the update was created. Required.
    :vartype created_date_time: str
    :ivar device_count: The number of devices in the group.
    :vartype device_count: int
    :ivar subgroups_with_new_updates_available_count: The count of subgroups with new updates
     available.
    :vartype subgroups_with_new_updates_available_count: int
    :ivar subgroups_with_updates_in_progress_count: The count of subgroups with updates in
     progress.
    :vartype subgroups_with_updates_in_progress_count: int
    :ivar subgroups_with_on_latest_update_count: The count of subgroups with devices on the latest
     update.
    :vartype subgroups_with_on_latest_update_count: int
    :ivar deployments: The active deployment Ids for the group.
    :vartype deployments: list[str]
    """

    group_id: str = rest_field(name="groupId", visibility=["read"])
    """Group identity. This is created from the value of the ADUGroup tag in the Iot
     Hub's device/module twin or $default for devices with no tag. Required."""
    group_type: Union[str, "_models.GroupType"] = rest_field(name="groupType")
    """Group type. Required. Known values are: \"IoTHubTag\" and \"DefaultNoTag\"."""
    created_date_time: str = rest_field(name="createdDateTime")
    """Date and time when the update was created. Required."""
    device_count: Optional[int] = rest_field(name="deviceCount")
    """The number of devices in the group."""
    subgroups_with_new_updates_available_count: Optional[int] = rest_field(name="subgroupsWithNewUpdatesAvailableCount")
    """The count of subgroups with new updates available."""
    subgroups_with_updates_in_progress_count: Optional[int] = rest_field(name="subgroupsWithUpdatesInProgressCount")
    """The count of subgroups with updates in progress."""
    subgroups_with_on_latest_update_count: Optional[int] = rest_field(name="subgroupsWithOnLatestUpdateCount")
    """The count of subgroups with devices on the latest update."""
    deployments: Optional[List[str]] = rest_field()
    """The active deployment Ids for the group."""

    @overload
    def __init__(
        self,
        *,
        group_type: Union[str, "_models.GroupType"],
        created_date_time: str,
        device_count: Optional[int] = None,
        subgroups_with_new_updates_available_count: Optional[int] = None,
        subgroups_with_updates_in_progress_count: Optional[int] = None,
        subgroups_with_on_latest_update_count: Optional[int] = None,
        deployments: Optional[List[str]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class HealthCheck(_model_base.Model):
    """Health check.

    :ivar name: Health check name.
    :vartype name: str
    :ivar result: Health check result. Known values are: "success" and "userError".
    :vartype result: str or ~azure.iot.deviceupdate.models.HealthCheckResult
    """

    name: Optional[str] = rest_field()
    """Health check name."""
    result: Optional[Union[str, "_models.HealthCheckResult"]] = rest_field()
    """Health check result. Known values are: \"success\" and \"userError\"."""

    @overload
    def __init__(
        self,
        *,
        name: Optional[str] = None,
        result: Optional[Union[str, "_models.HealthCheckResult"]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ImportManifestMetadata(_model_base.Model):
    """Metadata describing the import manifest, a document which describes the files
    and other metadata about an update version.

    All required parameters must be populated in order to send to server.

    :ivar url: Azure Blob location from which the import manifest can be downloaded by Device
     Update for IoT Hub. This is typically a read-only SAS-protected blob URL with
     an expiration set to at least 4 hours. Required.
    :vartype url: str
    :ivar size_in_bytes: File size in number of bytes. Required.
    :vartype size_in_bytes: int
    :ivar hashes: A JSON object containing the hash(es) of the file. At least SHA256 hash is
     required. This object can be thought of as a set of key-value pairs where the
     key is the hash algorithm, and the value is the hash of the file calculated
     using that algorithm. Required.
    :vartype hashes: dict[str, str]
    """

    url: str = rest_field()
    """Azure Blob location from which the import manifest can be downloaded by Device
     Update for IoT Hub. This is typically a read-only SAS-protected blob URL with
     an expiration set to at least 4 hours. Required."""
    size_in_bytes: int = rest_field(name="sizeInBytes")
    """File size in number of bytes. Required."""
    hashes: Dict[str, str] = rest_field()
    """A JSON object containing the hash(es) of the file. At least SHA256 hash is
     required. This object can be thought of as a set of key-value pairs where the
     key is the hash algorithm, and the value is the hash of the file calculated
     using that algorithm. Required."""

    @overload
    def __init__(
        self,
        *,
        url: str,
        size_in_bytes: int,
        hashes: Dict[str, str],
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ImportUpdateInputItem(_model_base.Model):
    """Import update input item metadata.

    All required parameters must be populated in order to send to server.

    :ivar import_manifest: Import manifest metadata like source URL, file size/hashes, etc.
     Required.
    :vartype import_manifest: ~azure.iot.deviceupdate.models.ImportManifestMetadata
    :ivar friendly_name: Friendly update name.
    :vartype friendly_name: str
    :ivar files: One or more update file properties like filename and source URL.
    :vartype files: list[~azure.iot.deviceupdate.models.FileImportMetadata]
    """

    import_manifest: "_models.ImportManifestMetadata" = rest_field(name="importManifest")
    """Import manifest metadata like source URL, file size/hashes, etc. Required."""
    friendly_name: Optional[str] = rest_field(name="friendlyName")
    """Friendly update name."""
    files: Optional[List["_models.FileImportMetadata"]] = rest_field()
    """One or more update file properties like filename and source URL."""

    @overload
    def __init__(
        self,
        *,
        import_manifest: "_models.ImportManifestMetadata",
        friendly_name: Optional[str] = None,
        files: Optional[List["_models.FileImportMetadata"]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class Step(_model_base.Model):
    """Update install instruction step.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    InlineStep, ReferenceStep

    All required parameters must be populated in order to send to server.

    :ivar type: Step type. Required. Known values are: "Inline" and "Reference".
    :vartype type: str or ~azure.iot.deviceupdate.models.StepType
    :ivar description: Step description.
    :vartype description: str
    """

    type: Literal[None] = rest_discriminator(name="type")
    """Step type. Required. Known values are: \"Inline\" and \"Reference\"."""
    description: Optional[str] = rest_field()
    """Step description."""

    @overload
    def __init__(
        self,
        *,
        description: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
        self.type: Literal[None] = None


class InlineStep(Step, discriminator="Inline"):
    """Installation instruction step that performs code execution.

    All required parameters must be populated in order to send to server.

    :ivar description: Step description.
    :vartype description: str
    :ivar type: Step type. Required. Step type that performs code execution.
    :vartype type: str or ~azure.iot.deviceupdate.models.INLINE
    :ivar handler: Identity of handler that will execute this step. Required if step type is
     inline. Required.
    :vartype handler: str
    :ivar handler_properties: Parameters to be passed to handler during execution.
    :vartype handler_properties: dict[str, any]
    :ivar files: Collection of file names to be passed to handler during execution. Required.
    :vartype files: list[str]
    """

    type: Literal[StepType.INLINE] = rest_discriminator(name="type")  # type: ignore
    """Step type. Required. Step type that performs code execution."""
    handler: str = rest_field()
    """Identity of handler that will execute this step. Required if step type is inline. Required."""
    handler_properties: Optional[Dict[str, Any]] = rest_field(name="handlerProperties")
    """Parameters to be passed to handler during execution."""
    files: List[str] = rest_field()
    """Collection of file names to be passed to handler during execution. Required."""

    @overload
    def __init__(
        self,
        *,
        handler: str,
        files: List[str],
        description: Optional[str] = None,
        handler_properties: Optional[Dict[str, Any]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
        self.type: Literal[StepType.INLINE] = StepType.INLINE


class InnerError(_model_base.Model):
    """An object containing more specific information about the error. As per Microsoft One API
    guidelines -
    https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses.

    :ivar code: One of a server-defined set of error codes.
    :vartype code: str
    :ivar innererror: Inner error.
    :vartype innererror: ~azure.iot.deviceupdate.models.InnerError
    """

    code: Optional[str] = rest_field()
    """One of a server-defined set of error codes."""
    innererror: Optional["_models.InnerError"] = rest_field()
    """Inner error."""

    @overload
    def __init__(
        self,
        *,
        code: Optional[str] = None,
        innererror: Optional["_models.InnerError"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class InstallResult(_model_base.Model):
    """The install result of an update and any step results under it.

    All required parameters must be populated in order to send to server.

    :ivar result_code: Install result code. Required.
    :vartype result_code: int
    :ivar extended_result_code: Install extended result code. Required.
    :vartype extended_result_code: int
    :ivar result_details: A string containing further details about the install result.
    :vartype result_details: str
    :ivar step_results: Array of step results.
    :vartype step_results: list[~azure.iot.deviceupdate.models.StepResult]
    """

    result_code: int = rest_field(name="resultCode")
    """Install result code. Required."""
    extended_result_code: int = rest_field(name="extendedResultCode")
    """Install extended result code. Required."""
    result_details: Optional[str] = rest_field(name="resultDetails")
    """A string containing further details about the install result."""
    step_results: Optional[List["_models.StepResult"]] = rest_field(name="stepResults")
    """Array of step results."""

    @overload
    def __init__(
        self,
        *,
        result_code: int,
        extended_result_code: int,
        result_details: Optional[str] = None,
        step_results: Optional[List["_models.StepResult"]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class Instructions(_model_base.Model):
    """Update installation instructions.

    All required parameters must be populated in order to send to server.

    :ivar steps: Collection of installation steps. Required.
    :vartype steps: list[~azure.iot.deviceupdate.models.Step]
    """

    steps: List["_models.Step"] = rest_field()
    """Collection of installation steps. Required."""

    @overload
    def __init__(
        self,
        *,
        steps: List["_models.Step"],
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class Limits(_model_base.Model):
    """The list of limits of how many of each resource are currently in use and how
    many are allowed.

    All required parameters must be populated in order to send to server.

    :ivar counters: The list of current counts of each limited resource and the maximum quota that
     are allowed. Required.
    :vartype counters: ~azure.iot.deviceupdate.models.Counters
    """

    counters: "_models.Counters" = rest_field()
    """The list of current counts of each limited resource and the maximum quota that are allowed.
     Required."""

    @overload
    def __init__(
        self,
        *,
        counters: "_models.Counters",
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class LogCollection(_model_base.Model):
    """Diagnostics request body.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar operation_id: The log collection id. Required.
    :vartype operation_id: str
    :ivar device_list: Array of Device Update agent ids. Required.
    :vartype device_list: list[~azure.iot.deviceupdate.models.DeviceUpdateAgentId]
    :ivar description: Description of the diagnostics operation.
    :vartype description: str
    :ivar created_date_time: The timestamp when the operation was created.
    :vartype created_date_time: str
    :ivar last_action_date_time: A timestamp for when the current state was entered.
    :vartype last_action_date_time: str
    :ivar status: Operation status. Known values are: "NotStarted", "Running", "Succeeded", and
     "Failed".
    :vartype status: str or ~azure.iot.deviceupdate.models.OperationStatus
    """

    operation_id: str = rest_field(name="operationId", visibility=["read", "create"])
    """The log collection id. Required."""
    device_list: List["_models.DeviceUpdateAgentId"] = rest_field(name="deviceList", visibility=["read", "create"])
    """Array of Device Update agent ids. Required."""
    description: Optional[str] = rest_field(visibility=["read", "create"])
    """Description of the diagnostics operation."""
    created_date_time: Optional[str] = rest_field(name="createdDateTime", visibility=["read"])
    """The timestamp when the operation was created."""
    last_action_date_time: Optional[str] = rest_field(name="lastActionDateTime", visibility=["read"])
    """A timestamp for when the current state was entered."""
    status: Optional[Union[str, "_models.OperationStatus"]] = rest_field(visibility=["read"])
    """Operation status. Known values are: \"NotStarted\", \"Running\", \"Succeeded\", and \"Failed\"."""

    @overload
    def __init__(
        self,
        *,
        operation_id: str,
        device_list: List["_models.DeviceUpdateAgentId"],
        description: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class LogCollectionOperationDetailedStatus(_model_base.Model):
    """Device diagnostics operation detailed status.

    :ivar operation_id: The device diagnostics operation id.
    :vartype operation_id: str
    :ivar created_date_time: The timestamp when the operation was created.
    :vartype created_date_time: str
    :ivar last_action_date_time: A timestamp for when the current state was entered.
    :vartype last_action_date_time: str
    :ivar status: Operation status. Known values are: "NotStarted", "Running", "Succeeded", and
     "Failed".
    :vartype status: str or ~azure.iot.deviceupdate.models.OperationStatus
    :ivar device_status: Status of the devices in the operation.
    :vartype device_status: list[~azure.iot.deviceupdate.models.LogCollectionOperationDeviceStatus]
    :ivar description: Device diagnostics operation description.
    :vartype description: str
    """

    operation_id: Optional[str] = rest_field(name="operationId")
    """The device diagnostics operation id."""
    created_date_time: Optional[str] = rest_field(name="createdDateTime")
    """The timestamp when the operation was created."""
    last_action_date_time: Optional[str] = rest_field(name="lastActionDateTime")
    """A timestamp for when the current state was entered."""
    status: Optional[Union[str, "_models.OperationStatus"]] = rest_field()
    """Operation status. Known values are: \"NotStarted\", \"Running\", \"Succeeded\", and \"Failed\"."""
    device_status: Optional[List["_models.LogCollectionOperationDeviceStatus"]] = rest_field(name="deviceStatus")
    """Status of the devices in the operation."""
    description: Optional[str] = rest_field()
    """Device diagnostics operation description."""

    @overload
    def __init__(
        self,
        *,
        operation_id: Optional[str] = None,
        created_date_time: Optional[str] = None,
        last_action_date_time: Optional[str] = None,
        status: Optional[Union[str, "_models.OperationStatus"]] = None,
        device_status: Optional[List["_models.LogCollectionOperationDeviceStatus"]] = None,
        description: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class LogCollectionOperationDeviceStatus(_model_base.Model):
    """Diagnostics operation device status.

    All required parameters must be populated in order to send to server.

    :ivar device_id: Device id. Required.
    :vartype device_id: str
    :ivar module_id: Module id.
    :vartype module_id: str
    :ivar status: Log upload status. Required. Known values are: "NotStarted", "Running",
     "Succeeded", and "Failed".
    :vartype status: str or ~azure.iot.deviceupdate.models.OperationStatus
    :ivar result_code: Log upload result code.
    :vartype result_code: str
    :ivar extended_result_code: Log upload extended result code.
    :vartype extended_result_code: str
    :ivar log_location: Log upload location.
    :vartype log_location: str
    """

    device_id: str = rest_field(name="deviceId")
    """Device id. Required."""
    module_id: Optional[str] = rest_field(name="moduleId")
    """Module id."""
    status: Union[str, "_models.OperationStatus"] = rest_field()
    """Log upload status. Required. Known values are: \"NotStarted\", \"Running\", \"Succeeded\", and
     \"Failed\"."""
    result_code: Optional[str] = rest_field(name="resultCode")
    """Log upload result code."""
    extended_result_code: Optional[str] = rest_field(name="extendedResultCode")
    """Log upload extended result code."""
    log_location: Optional[str] = rest_field(name="logLocation")
    """Log upload location."""

    @overload
    def __init__(
        self,
        *,
        device_id: str,
        status: Union[str, "_models.OperationStatus"],
        module_id: Optional[str] = None,
        result_code: Optional[str] = None,
        extended_result_code: Optional[str] = None,
        log_location: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ReferenceStep(Step, discriminator="Reference"):
    """Installation instruction step that installs another update.

    All required parameters must be populated in order to send to server.

    :ivar description: Step description.
    :vartype description: str
    :ivar type: Step type. Required. Step type that installs another update.
    :vartype type: str or ~azure.iot.deviceupdate.models.REFERENCE
    :ivar update_id: Referenced child update identity. Required.
    :vartype update_id: ~azure.iot.deviceupdate.models.UpdateId
    """

    type: Literal[StepType.REFERENCE] = rest_discriminator(name="type")  # type: ignore
    """Step type. Required. Step type that installs another update."""
    update_id: "_models.UpdateId" = rest_field(name="updateId")
    """Referenced child update identity. Required."""

    @overload
    def __init__(
        self,
        *,
        update_id: "_models.UpdateId",
        description: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
        self.type: Literal[StepType.REFERENCE] = StepType.REFERENCE


class StepResult(_model_base.Model):
    """The step result under an update.

    All required parameters must be populated in order to send to server.

    :ivar update: The update that this step installs if it is of reference type.
    :vartype update: ~azure.iot.deviceupdate.models.UpdateInfo
    :ivar description: Step description.
    :vartype description: str
    :ivar result_code: Install result code. Required.
    :vartype result_code: int
    :ivar extended_result_code: Install extended result code. Required.
    :vartype extended_result_code: int
    :ivar result_details: A string containing further details about the install result.
    :vartype result_details: str
    """

    update: Optional["_models.UpdateInfo"] = rest_field()
    """The update that this step installs if it is of reference type."""
    description: Optional[str] = rest_field()
    """Step description."""
    result_code: int = rest_field(name="resultCode")
    """Install result code. Required."""
    extended_result_code: int = rest_field(name="extendedResultCode")
    """Install extended result code. Required."""
    result_details: Optional[str] = rest_field(name="resultDetails")
    """A string containing further details about the install result."""

    @overload
    def __init__(
        self,
        *,
        result_code: int,
        extended_result_code: int,
        update: Optional["_models.UpdateInfo"] = None,
        description: Optional[str] = None,
        result_details: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class Update(_model_base.Model):  # pylint: disable=too-many-instance-attributes
    """Update metadata.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar update_id: Update identity. Required.
    :vartype update_id: ~azure.iot.deviceupdate.models.UpdateId
    :ivar description: Update description specified by creator.
    :vartype description: str
    :ivar friendly_name: Friendly update name specified by importer.
    :vartype friendly_name: str
    :ivar is_deployable: Whether the update can be deployed to a device on its own.
    :vartype is_deployable: bool
    :ivar update_type: Update type. Deprecated in latest import manifest schema.
    :vartype update_type: str
    :ivar installed_criteria: String interpreted by Device Update client to determine if the update
     is
     installed on the device. Deprecated in latest import manifest schema.
    :vartype installed_criteria: str
    :ivar compatibility: List of update compatibility information. Required.
    :vartype compatibility: list[dict[str, str]]
    :ivar instructions: Update install instructions.
    :vartype instructions: ~azure.iot.deviceupdate.models.Instructions
    :ivar referenced_by: List of update identities that reference this update.
    :vartype referenced_by: list[~azure.iot.deviceupdate.models.UpdateId]
    :ivar scan_result: Update aggregate scan result (calculated from payload file scan results).
    :vartype scan_result: str
    :ivar manifest_version: Schema version of manifest used to import the update. Required.
    :vartype manifest_version: str
    :ivar imported_date_time: Date and time in UTC when the update was imported. Required.
    :vartype imported_date_time: ~datetime.datetime
    :ivar created_date_time: Date and time in UTC when the update was created. Required.
    :vartype created_date_time: ~datetime.datetime
    :ivar etag: Update ETag.
    :vartype etag: str
    """

    update_id: "_models.UpdateId" = rest_field(name="updateId", visibility=["read"])
    """Update identity. Required."""
    description: Optional[str] = rest_field()
    """Update description specified by creator."""
    friendly_name: Optional[str] = rest_field(name="friendlyName")
    """Friendly update name specified by importer."""
    is_deployable: Optional[bool] = rest_field(name="isDeployable")
    """Whether the update can be deployed to a device on its own."""
    update_type: Optional[str] = rest_field(name="updateType")
    """Update type. Deprecated in latest import manifest schema."""
    installed_criteria: Optional[str] = rest_field(name="installedCriteria")
    """String interpreted by Device Update client to determine if the update is
     installed on the device. Deprecated in latest import manifest schema."""
    compatibility: List[Dict[str, str]] = rest_field()
    """List of update compatibility information. Required."""
    instructions: Optional["_models.Instructions"] = rest_field()
    """Update install instructions."""
    referenced_by: Optional[List["_models.UpdateId"]] = rest_field(name="referencedBy")
    """List of update identities that reference this update."""
    scan_result: Optional[str] = rest_field(name="scanResult")
    """Update aggregate scan result (calculated from payload file scan results)."""
    manifest_version: str = rest_field(name="manifestVersion")
    """Schema version of manifest used to import the update. Required."""
    imported_date_time: datetime.datetime = rest_field(name="importedDateTime", format="rfc3339")
    """Date and time in UTC when the update was imported. Required."""
    created_date_time: datetime.datetime = rest_field(name="createdDateTime", format="rfc3339")
    """Date and time in UTC when the update was created. Required."""
    etag: Optional[str] = rest_field()
    """Update ETag."""

    @overload
    def __init__(
        self,
        *,
        compatibility: List[Dict[str, str]],
        manifest_version: str,
        imported_date_time: datetime.datetime,
        created_date_time: datetime.datetime,
        description: Optional[str] = None,
        friendly_name: Optional[str] = None,
        is_deployable: Optional[bool] = None,
        update_type: Optional[str] = None,
        installed_criteria: Optional[str] = None,
        instructions: Optional["_models.Instructions"] = None,
        referenced_by: Optional[List["_models.UpdateId"]] = None,
        scan_result: Optional[str] = None,
        etag: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class UpdateCompliance(_model_base.Model):
    """Update compliance information.

    All required parameters must be populated in order to send to server.

    :ivar total_device_count: Total number of devices. Required.
    :vartype total_device_count: int
    :ivar on_latest_update_device_count: Number of devices on the latest update. Required.
    :vartype on_latest_update_device_count: int
    :ivar new_updates_available_device_count: Number of devices with a newer update available.
     Required.
    :vartype new_updates_available_device_count: int
    :ivar updates_in_progress_device_count: Number of devices with update in-progress. Required.
    :vartype updates_in_progress_device_count: int
    """

    total_device_count: int = rest_field(name="totalDeviceCount")
    """Total number of devices. Required."""
    on_latest_update_device_count: int = rest_field(name="onLatestUpdateDeviceCount")
    """Number of devices on the latest update. Required."""
    new_updates_available_device_count: int = rest_field(name="newUpdatesAvailableDeviceCount")
    """Number of devices with a newer update available. Required."""
    updates_in_progress_device_count: int = rest_field(name="updatesInProgressDeviceCount")
    """Number of devices with update in-progress. Required."""

    @overload
    def __init__(
        self,
        *,
        total_device_count: int,
        on_latest_update_device_count: int,
        new_updates_available_device_count: int,
        updates_in_progress_device_count: int,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class UpdateFile(_model_base.Model):  # pylint: disable=too-many-instance-attributes
    """Update file metadata.

    All required parameters must be populated in order to send to server.

    :ivar file_name: File name. Required.
    :vartype file_name: str
    :ivar size_in_bytes: File size in number of bytes. Required.
    :vartype size_in_bytes: int
    :ivar hashes: Mapping of hashing algorithm to base64 encoded hash values. Required.
    :vartype hashes: dict[str, str]
    :ivar mime_type: File MIME type.
    :vartype mime_type: str
    :ivar scan_result: Anti-malware scan result.
    :vartype scan_result: str
    :ivar scan_details: Anti-malware scan details.
    :vartype scan_details: str
    :ivar properties: Optional file properties (not consumed by service but pass-through to
     device).
    :vartype properties: dict[str, str]
    :ivar file_id: File identity, generated by server at import time. Required.
    :vartype file_id: str
    :ivar related_files: Optional related files metadata used together DownloadHandler metadata to
     download payload file.
    :vartype related_files: list[~azure.iot.deviceupdate.models.UpdateFileBase]
    :ivar download_handler: Optional download handler for utilizing related files to download
     payload file.
    :vartype download_handler: ~azure.iot.deviceupdate.models.UpdateFileDownloadHandler
    :ivar etag: File ETag.
    :vartype etag: str
    """

    file_name: str = rest_field(name="fileName")
    """File name. Required."""
    size_in_bytes: int = rest_field(name="sizeInBytes")
    """File size in number of bytes. Required."""
    hashes: Dict[str, str] = rest_field()
    """Mapping of hashing algorithm to base64 encoded hash values. Required."""
    mime_type: Optional[str] = rest_field(name="mimeType")
    """File MIME type."""
    scan_result: Optional[str] = rest_field(name="scanResult")
    """Anti-malware scan result."""
    scan_details: Optional[str] = rest_field(name="scanDetails")
    """Anti-malware scan details."""
    properties: Optional[Dict[str, str]] = rest_field()
    """Optional file properties (not consumed by service but pass-through to device)."""
    file_id: str = rest_field(name="fileId")
    """File identity, generated by server at import time. Required."""
    related_files: Optional[List["_models.UpdateFileBase"]] = rest_field(name="relatedFiles")
    """Optional related files metadata used together DownloadHandler metadata to
     download payload file."""
    download_handler: Optional["_models.UpdateFileDownloadHandler"] = rest_field(name="downloadHandler")
    """Optional download handler for utilizing related files to download payload file."""
    etag: Optional[str] = rest_field()
    """File ETag."""

    @overload
    def __init__(
        self,
        *,
        file_name: str,
        size_in_bytes: int,
        hashes: Dict[str, str],
        file_id: str,
        mime_type: Optional[str] = None,
        scan_result: Optional[str] = None,
        scan_details: Optional[str] = None,
        properties: Optional[Dict[str, str]] = None,
        related_files: Optional[List["_models.UpdateFileBase"]] = None,
        download_handler: Optional["_models.UpdateFileDownloadHandler"] = None,
        etag: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class UpdateFileBase(_model_base.Model):
    """Update file basic metadata.

    All required parameters must be populated in order to send to server.

    :ivar file_name: File name. Required.
    :vartype file_name: str
    :ivar size_in_bytes: File size in number of bytes. Required.
    :vartype size_in_bytes: int
    :ivar hashes: Mapping of hashing algorithm to base64 encoded hash values. Required.
    :vartype hashes: dict[str, str]
    :ivar mime_type: File MIME type.
    :vartype mime_type: str
    :ivar scan_result: Anti-malware scan result.
    :vartype scan_result: str
    :ivar scan_details: Anti-malware scan details.
    :vartype scan_details: str
    :ivar properties: Optional file properties (not consumed by service but pass-through to
     device).
    :vartype properties: dict[str, str]
    """

    file_name: str = rest_field(name="fileName")
    """File name. Required."""
    size_in_bytes: int = rest_field(name="sizeInBytes")
    """File size in number of bytes. Required."""
    hashes: Dict[str, str] = rest_field()
    """Mapping of hashing algorithm to base64 encoded hash values. Required."""
    mime_type: Optional[str] = rest_field(name="mimeType")
    """File MIME type."""
    scan_result: Optional[str] = rest_field(name="scanResult")
    """Anti-malware scan result."""
    scan_details: Optional[str] = rest_field(name="scanDetails")
    """Anti-malware scan details."""
    properties: Optional[Dict[str, str]] = rest_field()
    """Optional file properties (not consumed by service but pass-through to device)."""

    @overload
    def __init__(
        self,
        *,
        file_name: str,
        size_in_bytes: int,
        hashes: Dict[str, str],
        mime_type: Optional[str] = None,
        scan_result: Optional[str] = None,
        scan_details: Optional[str] = None,
        properties: Optional[Dict[str, str]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class UpdateFileDownloadHandler(_model_base.Model):
    """Download handler for utilizing related files to download payload file.

    All required parameters must be populated in order to send to server.

    :ivar id: Download handler identifier. Required.
    :vartype id: str
    """

    id: str = rest_field()
    """Download handler identifier. Required."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class UpdateId(_model_base.Model):
    """Update identifier.

    All required parameters must be populated in order to send to server.

    :ivar provider: Update provider. Required.
    :vartype provider: str
    :ivar name: Update name. Required.
    :vartype name: str
    :ivar version: Update version.Two to four part dot separated numerical version numbers.
     Each part must be a number between 0 and 2147483647 and leading zeroes will be dropped.
     Required.
    :vartype version: str
    """

    provider: str = rest_field()
    """Update provider. Required."""
    name: str = rest_field()
    """Update name. Required."""
    version: str = rest_field()
    """Update version.Two to four part dot separated numerical version numbers.
     Each part must be a number between 0 and 2147483647 and leading zeroes will be dropped.
     Required."""

    @overload
    def __init__(
        self,
        *,
        provider: str,
        name: str,
        version: str,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class UpdateInfo(_model_base.Model):
    """Update information.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar update_id: Update identifier. Required.
    :vartype update_id: ~azure.iot.deviceupdate.models.UpdateId
    :ivar description: Update description.
    :vartype description: str
    :ivar friendly_name: Friendly update name.
    :vartype friendly_name: str
    """

    update_id: "_models.UpdateId" = rest_field(name="updateId", visibility=["read"])
    """Update identifier. Required."""
    description: Optional[str] = rest_field(visibility=["read"])
    """Update description."""
    friendly_name: Optional[str] = rest_field(name="friendlyName", visibility=["read"])
    """Friendly update name."""


class UpdateOperation(_model_base.Model):
    """Operation metadata.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar operation_id: Operation Id. Required.
    :vartype operation_id: str
    :ivar status: Operation status. Required. Known values are: "NotStarted", "Running",
     "Succeeded", and "Failed".
    :vartype status: str or ~azure.iot.deviceupdate.models.OperationStatus
    :ivar update: The update being imported or deleted. For import, this property will only be
     populated after import manifest is processed successfully.
    :vartype update: ~azure.iot.deviceupdate.models.UpdateInfo
    :ivar resource_location: Location of the imported update when operation is successful.
    :vartype resource_location: str
    :ivar error: Operation error encountered, if any.
    :vartype error: ~azure.iot.deviceupdate.models.Error
    :ivar trace_id: Operation correlation identity that can used by Microsoft Support for
     troubleshooting.
    :vartype trace_id: str
    :ivar last_action_date_time: Date and time in UTC when the operation status was last updated.
     Required.
    :vartype last_action_date_time: ~datetime.datetime
    :ivar created_date_time: Date and time in UTC when the operation was created. Required.
    :vartype created_date_time: ~datetime.datetime
    :ivar etag: Operation ETag.
    :vartype etag: str
    """

    operation_id: str = rest_field(name="operationId", visibility=["read"])
    """Operation Id. Required."""
    status: Union[str, "_models.OperationStatus"] = rest_field()
    """Operation status. Required. Known values are: \"NotStarted\", \"Running\", \"Succeeded\", and
     \"Failed\"."""
    update: Optional["_models.UpdateInfo"] = rest_field()
    """The update being imported or deleted. For import, this property will only be
     populated after import manifest is processed successfully."""
    resource_location: Optional[str] = rest_field(name="resourceLocation")
    """Location of the imported update when operation is successful."""
    error: Optional["_models.Error"] = rest_field()
    """Operation error encountered, if any."""
    trace_id: Optional[str] = rest_field(name="traceId")
    """Operation correlation identity that can used by Microsoft Support for
     troubleshooting."""
    last_action_date_time: datetime.datetime = rest_field(name="lastActionDateTime", format="rfc3339")
    """Date and time in UTC when the operation status was last updated. Required."""
    created_date_time: datetime.datetime = rest_field(name="createdDateTime", format="rfc3339")
    """Date and time in UTC when the operation was created. Required."""
    etag: Optional[str] = rest_field()
    """Operation ETag."""

    @overload
    def __init__(
        self,
        *,
        status: Union[str, "_models.OperationStatus"],
        last_action_date_time: datetime.datetime,
        created_date_time: datetime.datetime,
        update: Optional["_models.UpdateInfo"] = None,
        resource_location: Optional[str] = None,
        error: Optional["_models.Error"] = None,
        trace_id: Optional[str] = None,
        etag: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class UsageQuotaCounter(_model_base.Model):
    """A counter with both usage and quota information.

    All required parameters must be populated in order to send to server.

    :ivar usage: The current number of the resource that exist. Required.
    :vartype usage: int
    :ivar quota: The maximum number of the resource that can be created. Required.
    :vartype quota: int
    """

    usage: int = rest_field()
    """The current number of the resource that exist. Required."""
    quota: int = rest_field()
    """The maximum number of the resource that can be created. Required."""

    @overload
    def __init__(
        self,
        *,
        usage: int,
        quota: int,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)
